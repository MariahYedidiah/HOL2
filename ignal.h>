sigaction(2)                               System Calls Manual                               sigaction(2)

NNAAMMEE
       sigaction, rt_sigaction - examine and change a signal action

LLIIBBRRAARRYY
       Standard C library (_l_i_b_c, _-_l_c)

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssiiggnnaall..hh>>

       iinntt ssiiggaaccttiioonn((iinntt _s_i_g_n_u_m,,
                     ccoonnsstt ssttrruucctt ssiiggaaccttiioonn **__NNuullllaabbllee rreessttrriicctt _a_c_t,,
                     ssttrruucctt ssiiggaaccttiioonn **__NNuullllaabbllee rreessttrriicctt _o_l_d_a_c_t));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ssiiggaaccttiioonn():
           _POSIX_C_SOURCE

       _s_i_g_i_n_f_o___t:
           _POSIX_C_SOURCE >= 199309L

DDEESSCCRRIIPPTTIIOONN
       The  ssiiggaaccttiioonn()  system call is used to change the action taken by a process on receipt of a spe‐
       cific signal.  (See ssiiggnnaall(7) for an overview of signals.)

       _s_i_g_n_u_m specifies the signal and can be any valid signal except SSIIGGKKIILLLL and SSIIGGSSTTOOPP.

       If _a_c_t is non-NULL, the new action for signal _s_i_g_n_u_m is installed from _a_c_t.   If  _o_l_d_a_c_t  is  non-
       NULL, the previous action is saved in _o_l_d_a_c_t.

       The _s_i_g_a_c_t_i_o_n structure is defined as something like:

           struct sigaction {
               void     (*sa_handler)(int);
               void     (*sa_sigaction)(int, siginfo_t *, void *);
               sigset_t   sa_mask;
               int        sa_flags;
               void     (*sa_restorer)(void);
           };

       On some architectures a union is involved: do not assign to both _s_a___h_a_n_d_l_e_r and _s_a___s_i_g_a_c_t_i_o_n.

       The  _s_a___r_e_s_t_o_r_e_r field is not intended for application use.  (POSIX does not specify a _s_a___r_e_s_t_o_r_e_r
       field.)  Some further details of the purpose of this field can be found in ssiiggrreettuurrnn(2).

       _s_a___h_a_n_d_l_e_r specifies the action to be associated with _s_i_g_n_u_m and can be one of the following:

       •  SSIIGG__DDFFLL for the default action.

       •  SSIIGG__IIGGNN to ignore this signal.

       •  A pointer to a signal handling function.  This function receives the signal number as its  only
          argument.

       If  SSAA__SSIIGGIINNFFOO  is  specified in _s_a___f_l_a_g_s, then _s_a___s_i_g_a_c_t_i_o_n (instead of _s_a___h_a_n_d_l_e_r) specifies the
       signal-handling function for _s_i_g_n_u_m.  This function receives three arguments, as described below.

       _s_a___m_a_s_k specifies a mask of signals which should be blocked (i.e., added to the signal mask of the
       thread  in  which the signal handler is invoked) during execution of the signal handler.  In addi‐
       tion, the signal which triggered the handler will be blocked, unless the SSAA__NNOODDEEFFEERR flag is used.

       _s_a___f_l_a_g_s specifies a set of flags which modify the behavior of the signal.  It is  formed  by  the
       bitwise OR of zero or more of the following:

       SSAA__NNOOCCLLDDSSTTOOPP
              If  _s_i_g_n_u_m  is  SSIIGGCCHHLLDD,  do not receive notification when child processes stop (i.e., when
              they receive one of SSIIGGSSTTOOPP, SSIIGGTTSSTTPP, SSIIGGTTTTIINN, or SSIIGGTTTTOOUU) or resume  (i.e.,  they  receive
              SSIIGGCCOONNTT)  (see  wwaaiitt(2)).   This  flag  is  meaningful only when establishing a handler for
              SSIIGGCCHHLLDD.

       SSAA__NNOOCCLLDDWWAAIITT (since Linux 2.6)
              If _s_i_g_n_u_m is SSIIGGCCHHLLDD, do not transform children into zombies when they terminate.  See also
              wwaaiittppiidd(2).   This flag is meaningful only when establishing a handler for SSIIGGCCHHLLDD, or when
              setting that signal's disposition to SSIIGG__DDFFLL.

              If the SSAA__NNOOCCLLDDWWAAIITT flag is set when establishing a handler for SSIIGGCCHHLLDD, POSIX.1 leaves  it
              unspecified  whether  a  SSIIGGCCHHLLDD  signal  is generated when a child process terminates.  On
              Linux, a SSIIGGCCHHLLDD signal is generated in this case; on some  other  implementations,  it  is
              not.

       SSAA__NNOODDEEFFEERR
              Do  not  add  the signal to the thread's signal mask while the handler is executing, unless
              the signal is specified in _a_c_t_._s_a___m_a_s_k.  Consequently, a further instance of the signal may
              be delivered to the thread while it is executing the handler.  This flag is meaningful only
              when establishing a signal handler.

              SSAA__NNOOMMAASSKK is an obsolete, nonstandard synonym for this flag.

       SSAA__OONNSSTTAACCKK
              Call the signal handler on an alternate signal stack provided by ssiiggaallttssttaacckk(2).  If an al‐
              ternate  stack  is  not available, the default stack will be used.  This flag is meaningful
              only when establishing a signal handler.

       SSAA__RREESSEETTHHAANNDD
              Restore the signal action to the default upon entry to the signal handler.   This  flag  is
              meaningful only when establishing a signal handler.

              SSAA__OONNEESSHHOOTT is an obsolete, nonstandard synonym for this flag.

       SSAA__RREESSTTAARRTT
              Provide  behavior  compatible  with  BSD  signal  semantics  by making certain system calls
              restartable across signals.  This flag is meaningful only when establishing a  signal  han‐
              dler.  See ssiiggnnaall(7) for a discussion of system call restarting.

       SSAA__RREESSTTOORREERR
              _N_o_t  _i_n_t_e_n_d_e_d  _f_o_r  _a_p_p_l_i_c_a_t_i_o_n _u_s_e.  This flag is used by C libraries to indicate that the
              _s_a___r_e_s_t_o_r_e_r field contains the address of a "signal trampoline".  See ssiiggrreettuurrnn(2) for more
              details.

       SSAA__SSIIGGIINNFFOO (since Linux 2.2)
              The  signal  handler  takes three arguments, not one.  In this case, _s_a___s_i_g_a_c_t_i_o_n should be
              set instead of _s_a___h_a_n_d_l_e_r.  This flag is meaningful only when establishing  a  signal  han‐
              dler.

       SSAA__UUNNSSUUPPPPOORRTTEEDD (since Linux 5.11)
              Used to dynamically probe for flag bit support.

              If  an attempt to register a handler succeeds with this flag set in _a_c_t_-_>_s_a___f_l_a_g_s alongside
              other flags that are potentially unsupported by the kernel, and an  immediately  subsequent
              ssiiggaaccttiioonn()  call  specifying  the  same  signal number and with a non-NULL _o_l_d_a_c_t argument
              yields SSAA__UUNNSSUUPPPPOORRTTEEDD _c_l_e_a_r in _o_l_d_a_c_t_-_>_s_a___f_l_a_g_s, then _o_l_d_a_c_t_-_>_s_a___f_l_a_g_s may  be  used  as  a
              bitmask describing which of the potentially unsupported flags are, in fact, supported.  See
              the section "Dynamically probing for flag bit support" below for more details.

       SSAA__EEXXPPOOSSEE__TTAAGGBBIITTSS (since Linux 5.11)
              Normally, when delivering a signal, an architecture-specific set of tag  bits  are  cleared
              from  the _s_i___a_d_d_r field of _s_i_g_i_n_f_o___t.  If this flag is set, an architecture-specific subset
              of the tag bits will be preserved in _s_i___a_d_d_r.

              Programs that need to be compatible with Linux versions older than 5.11 must use  SSAA__UUNNSSUUPP‐‐
              PPOORRTTEEDD to probe for support.

   TThhee ssiiggiinnffoo__tt aarrgguummeenntt ttoo aa SSAA__SSIIGGIINNFFOO hhaannddlleerr
       When  the  SSAA__SSIIGGIINNFFOO  flag is specified in _a_c_t_._s_a___f_l_a_g_s, the signal handler address is passed via
       the _a_c_t_._s_a___s_i_g_a_c_t_i_o_n field.  This handler takes three arguments, as follows:

           void
           handler(int sig, siginfo_t *info, void *ucontext)
           {
               ...
           }

       These three arguments are as follows

       _s_i_g    The number of the signal that caused invocation of the handler.

       _i_n_f_o   A pointer to a _s_i_g_i_n_f_o___t, which is a structure containing  further  information  about  the
              signal, as described below.

       _u_c_o_n_t_e_x_t
              This  is  a pointer to a _u_c_o_n_t_e_x_t___t structure, cast to _v_o_i_d _*.  The structure pointed to by
              this field contains signal context information that was saved on the  user-space  stack  by
              the kernel; for details, see ssiiggrreettuurrnn(2).  Further information about the _u_c_o_n_t_e_x_t___t struc‐
              ture can be found in ggeettccoonntteexxtt(3) and ssiiggnnaall(7).  Commonly, the handler  function  doesn't
              make any use of the third argument.

       The _s_i_g_i_n_f_o___t data type is a structure with the following fields:

           siginfo_t {
               int      si_signo;     /* Signal number */
               int      si_errno;     /* An errno value */
               int      si_code;      /* Signal code */
               int      si_trapno;    /* Trap number that caused
                                         hardware-generated signal
                                         (unused on most architectures) */
               pid_t    si_pid;       /* Sending process ID */
               uid_t    si_uid;       /* Real user ID of sending process */
               int      si_status;    /* Exit value or signal */
               clock_t  si_utime;     /* User time consumed */
               clock_t  si_stime;     /* System time consumed */
               union sigval si_value; /* Signal value */
               int      si_int;       /* POSIX.1b signal */
               void    *si_ptr;       /* POSIX.1b signal */
               int      si_overrun;   /* Timer overrun count;
                                         POSIX.1b timers */
               int      si_timerid;   /* Timer ID; POSIX.1b timers */
               void    *si_addr;      /* Memory location which caused fault */
               long     si_band;      /* Band event (was _i_n_t in
                                         glibc 2.3.2 and earlier) */
               int      si_fd;        /* File descriptor */
               short    si_addr_lsb;  /* Least significant bit of address
                                         (since Linux 2.6.32) */
               void    *si_lower;     /* Lower bound when address violation
                                         occurred (since Linux 3.19) */
               void    *si_upper;     /* Upper bound when address violation
                                         occurred (since Linux 3.19) */
               int      si_pkey;      /* Protection key on PTE that caused
                                         fault (since Linux 4.6) */
               void    *si_call_addr; /* Address of system call instruction
                                         (since Linux 3.5) */
               int      si_syscall;   /* Number of attempted system call
                                         (since Linux 3.5) */
               unsigned int si_arch;  /* Architecture of attempted system call
                                         (since Linux 3.5) */
           }

       _s_i___s_i_g_n_o,  _s_i___e_r_r_n_o  and  _s_i___c_o_d_e  are  defined for all signals.  (_s_i___e_r_r_n_o is generally unused on
       Linux.)  The rest of the struct may be a union, so that one should read only the fields  that  are
       meaningful for the given signal:

       •  Signals sent with kkiillll(2) and ssiiggqquueeuuee(3) fill in _s_i___p_i_d and _s_i___u_i_d.  In addition, signals sent
          with ssiiggqquueeuuee(3) fill in _s_i___i_n_t and _s_i___p_t_r with the values specified by the sender of the  sig‐
          nal; see ssiiggqquueeuuee(3) for more details.

       •  Signals  sent  by  POSIX.1b  timers  (since  Linux 2.6) fill in _s_i___o_v_e_r_r_u_n and _s_i___t_i_m_e_r_i_d.  The
          _s_i___t_i_m_e_r_i_d field is an internal ID used by the kernel to identify the timer; it is not the same
          as  the timer ID returned by ttiimmeerr__ccrreeaattee(2).  The _s_i___o_v_e_r_r_u_n field is the timer overrun count;
          this is the same information as is obtained by a call to ttiimmeerr__ggeettoovveerrrruunn(2).  These fields are
          nonstandard Linux extensions.

       •  Signals  sent  for  message  queue  notification (see the description of SSIIGGEEVV__SSIIGGNNAALL in mmqq__nnoo‐‐
          ttiiffyy(3)) fill in _s_i___i_n_t/_s_i___p_t_r, with the _s_i_g_e_v___v_a_l_u_e supplied to mmqq__nnoottiiffyy(3); _s_i___p_i_d, with the
          process ID of the message sender; and _s_i___u_i_d, with the real user ID of the message sender.

       •  SSIIGGCCHHLLDD fills in _s_i___p_i_d, _s_i___u_i_d, _s_i___s_t_a_t_u_s, _s_i___u_t_i_m_e, and _s_i___s_t_i_m_e, providing information about
          the child.  The _s_i___p_i_d field is the process ID of the child; _s_i___u_i_d is the  child's  real  user
          ID.   The  _s_i___s_t_a_t_u_s field contains the exit status of the child (if _s_i___c_o_d_e is CCLLDD__EEXXIITTEEDD), or
          the signal number that caused the process to change state.  The _s_i___u_t_i_m_e and  _s_i___s_t_i_m_e  contain
          the  user  and system CPU time used by the child process; these fields do not include the times
          used by waited-for children (unlike ggeettrruussaaggee(2) and ttiimmeess(2)).  Up to  Linux  2.6,  and  since
          Linux 2.6.27, these fields report CPU time in units of _s_y_s_c_o_n_f_(___S_C___C_L_K___T_C_K_).  In Linux 2.6 ker‐
          nels before Linux 2.6.27, a bug meant that these fields reported time in units of the  (config‐
          urable) system jiffy (see ttiimmee(7)).

       •  SSIIGGIILLLL, SSIIGGFFPPEE, SSIIGGSSEEGGVV, SSIIGGBBUUSS, and SSIIGGTTRRAAPP fill in _s_i___a_d_d_r with the address of the fault.  On
          some architectures, these signals also fill in the _s_i___t_r_a_p_n_o field.

          Some suberrors  of  SSIIGGBBUUSS,  in  particular  BBUUSS__MMCCEEEERRRR__AAOO  and  BBUUSS__MMCCEEEERRRR__AARR,  also  fill  in
          _s_i___a_d_d_r___l_s_b.  This field indicates the least significant bit of the reported address and there‐
          fore the extent of the corruption.  For example, if a full page was corrupted, _s_i___a_d_d_r___l_s_b con‐
          tains  _l_o_g_2_(_s_y_s_c_o_n_f_(___S_C___P_A_G_E_S_I_Z_E_)_).  When SSIIGGTTRRAAPP is delivered in response to a ppttrraaccee(2) event
          (PTRACE_EVENT_foo), _s_i___a_d_d_r is not populated, but _s_i___p_i_d and _s_i___u_i_d are populated with the  re‐
          spective  process  ID  and  user  ID  responsible for delivering the trap.  In the case of sseecc‐‐
          ccoommpp(2), the tracee will be shown as delivering the event.  BBUUSS__MMCCEEEERRRR__**  and  _s_i___a_d_d_r___l_s_b  are
          Linux-specific extensions.

          The SSEEGGVV__BBNNDDEERRRR suberror of SSIIGGSSEEGGVV populates _s_i___l_o_w_e_r and _s_i___u_p_p_e_r.

          The SSEEGGVV__PPKKUUEERRRR suberror of SSIIGGSSEEGGVV populates _s_i___p_k_e_y.

       •  SSIIGGIIOO/SSIIGGPPOOLLLL  (the  two  names are synonyms on Linux) fills in _s_i___b_a_n_d and _s_i___f_d.  The _s_i___b_a_n_d
          event is a bit mask containing the same values as are filled in the _r_e_v_e_n_t_s field  by  ppoollll(2).
          The _s_i___f_d field indicates the file descriptor for which the I/O event occurred; for further de‐
          tails, see the description of FF__SSEETTSSIIGG in ffccnnttll(2).

       •  SSIIGGSSYYSS, generated (since Linux 3.5) when a seccomp filter returns  SSEECCCCOOMMPP__RREETT__TTRRAAPP,  fills  in
          _s_i___c_a_l_l___a_d_d_r, _s_i___s_y_s_c_a_l_l, _s_i___a_r_c_h, _s_i___e_r_r_n_o, and other fields as described in sseeccccoommpp(2).

   TThhee ssii__ccooddee ffiieelldd
       The _s_i___c_o_d_e field inside the _s_i_g_i_n_f_o___t argument that is passed to a SSAA__SSIIGGIINNFFOO signal handler is a
       value (not a bit mask) indicating why this signal was sent.  For a ppttrraaccee(2) event,  _s_i___c_o_d_e  will
       contain SSIIGGTTRRAAPP and have the ptrace event in the high byte:

           (SIGTRAP | PTRACE_EVENT_foo << 8).

       For a non-ppttrraaccee(2) event, the values that can appear in _s_i___c_o_d_e are described in the remainder of
       this section.  Since glibc 2.20, the definitions of most of these symbols are obtained from  _<_s_i_g_‐
       _n_a_l_._h_> by defining feature test macros (before including _a_n_y header file) as follows:

       •  __XXOOPPEENN__SSOOUURRCCEE with the value 500 or greater;

       •  __XXOOPPEENN__SSOOUURRCCEE and __XXOOPPEENN__SSOOUURRCCEE__EEXXTTEENNDDEEDD; or

       •  __PPOOSSIIXX__CC__SSOOUURRCCEE with the value 200809L or greater.

       For the TTRRAAPP__** constants, the symbol definitions are provided only in the first two cases.  Before
       glibc 2.20, no feature test macros were required to obtain these symbols.

       For a regular signal, the following list shows the values which can be placed in _s_i___c_o_d_e  for  any
       signal, along with the reason that the signal was generated.

           SSII__UUSSEERR
                  kkiillll(2).

           SSII__KKEERRNNEELL
                  Sent by the kernel.

           SSII__QQUUEEUUEE
                  ssiiggqquueeuuee(3).

           SSII__TTIIMMEERR
                  POSIX timer expired.

           SSII__MMEESSGGQQ (since Linux 2.6.6)
                  POSIX message queue state changed; see mmqq__nnoottiiffyy(3).

           SSII__AASSYYNNCCIIOO
                  AIO completed.

           SSII__SSIIGGIIOO
                  Queued  SSIIGGIIOO  (only  up  to  Linux  2.2;  from Linux 2.4 onward SSIIGGIIOO/SSIIGGPPOOLLLL fills in
                  _s_i___c_o_d_e as described below).

           SSII__TTKKIILLLL (since Linux 2.4.19)
                  ttkkiillll(2) or ttggkkiillll(2).

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGIILLLL signal:

           IILLLL__IILLLLOOPPCC
                  Illegal opcode.

           IILLLL__IILLLLOOPPNN
                  Illegal operand.

           IILLLL__IILLLLAADDRR
                  Illegal addressing mode.

           IILLLL__IILLLLTTRRPP
                  Illegal trap.

           IILLLL__PPRRVVOOPPCC
                  Privileged opcode.

           IILLLL__PPRRVVRREEGG
                  Privileged register.

           IILLLL__CCOOPPRROOCC
                  Coprocessor error.

           IILLLL__BBAADDSSTTKK
                  Internal stack error.

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGFFPPEE signal:

           FFPPEE__IINNTTDDIIVV
                  Integer divide by zero.

           FFPPEE__IINNTTOOVVFF
                  Integer overflow.

           FFPPEE__FFLLTTDDIIVV
                  Floating-point divide by zero.

           FFPPEE__FFLLTTOOVVFF
                  Floating-point overflow.

           FFPPEE__FFLLTTUUNNDD
                  Floating-point underflow.

           FFPPEE__FFLLTTRREESS
                  Floating-point inexact result.

           FFPPEE__FFLLTTIINNVV
                  Floating-point invalid operation.

           FFPPEE__FFLLTTSSUUBB
                  Subscript out of range.

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGSSEEGGVV signal:

           SSEEGGVV__MMAAPPEERRRR
                  Address not mapped to object.

           SSEEGGVV__AACCCCEERRRR
                  Invalid permissions for mapped object.

           SSEEGGVV__BBNNDDEERRRR (since Linux 3.19)
                  Failed address bound checks.

           SSEEGGVV__PPKKUUEERRRR (since Linux 4.6)
                  Access was denied by memory protection keys.  See ppkkeeyyss(7).  The protection  key  which
                  applied to this access is available via _s_i___p_k_e_y.

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGBBUUSS signal:

           BBUUSS__AADDRRAALLNN
                  Invalid address alignment.

           BBUUSS__AADDRREERRRR
                  Nonexistent physical address.

           BBUUSS__OOBBJJEERRRR
                  Object-specific hardware error.

           BBUUSS__MMCCEEEERRRR__AARR (since Linux 2.6.32)
                  Hardware memory error consumed on a machine check; action required.

           BBUUSS__MMCCEEEERRRR__AAOO (since Linux 2.6.32)
                  Hardware memory error detected in process but not consumed; action optional.

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGTTRRAAPP signal:

           TTRRAAPP__BBRRKKPPTT
                  Process breakpoint.

           TTRRAAPP__TTRRAACCEE
                  Process trace trap.

           TTRRAAPP__BBRRAANNCCHH (since Linux 2.4, IA64 only)
                  Process taken branch trap.

           TTRRAAPP__HHWWBBKKPPTT (since Linux 2.4, IA64 only)
                  Hardware breakpoint/watchpoint.

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGCCHHLLDD signal:

           CCLLDD__EEXXIITTEEDD
                  Child has exited.

           CCLLDD__KKIILLLLEEDD
                  Child was killed.

           CCLLDD__DDUUMMPPEEDD
                  Child terminated abnormally.

           CCLLDD__TTRRAAPPPPEEDD
                  Traced child has trapped.

           CCLLDD__SSTTOOPPPPEEDD
                  Child has stopped.

           CCLLDD__CCOONNTTIINNUUEEDD (since Linux 2.6.9)
                  Stopped child has continued.

       The following values can be placed in _s_i___c_o_d_e for a SSIIGGIIOO/SSIIGGPPOOLLLL signal:

           PPOOLLLL__IINN
                  Data input available.

           PPOOLLLL__OOUUTT
                  Output buffers available.

           PPOOLLLL__MMSSGG
                  Input message available.

           PPOOLLLL__EERRRR
                  I/O error.

           PPOOLLLL__PPRRII
                  High priority input available.

           PPOOLLLL__HHUUPP
                  Device disconnected.

       The following value can be placed in _s_i___c_o_d_e for a SSIIGGSSYYSS signal:

           SSYYSS__SSEECCCCOOMMPP (since Linux 3.5)
                  Triggered by a sseeccccoommpp(2) filter rule.

   DDyynnaammiiccaallllyy pprroobbiinngg ffoorr ffllaagg bbiitt ssuuppppoorrtt
       The ssiiggaaccttiioonn() call on Linux accepts unknown bits set in _a_c_t_-_>_s_a___f_l_a_g_s without error.  The behav‐
       ior of the kernel starting with Linux 5.11 is that a second ssiiggaaccttiioonn() will  clear  unknown  bits
       from  _o_l_d_a_c_t_-_>_s_a___f_l_a_g_s.   However,  historically,  a second ssiiggaaccttiioonn() call would typically leave
       those bits set in _o_l_d_a_c_t_-_>_s_a___f_l_a_g_s.

       This means that support for new flags cannot be detected simply by testing for a flag in _s_a___f_l_a_g_s,
       and  a  program  must  test that SSAA__UUNNSSUUPPPPOORRTTEEDD has been cleared before relying on the contents of
       _s_a___f_l_a_g_s.

       Since the behavior of the signal handler cannot be guaranteed unless the check passes, it is  wise
       to either block the affected signal while registering the handler and performing the check in this
       case, or where this is not possible, for example if the signal is synchronous, to issue the second
       ssiiggaaccttiioonn() in the signal handler itself.

       In  kernels  that  do not support a specific flag, the kernel's behavior is as if the flag was not
       set, even if the flag was set in _a_c_t_-_>_s_a___f_l_a_g_s.

       The flags SSAA__NNOOCCLLDDSSTTOOPP, SSAA__NNOOCCLLDDWWAAIITT, SSAA__SSIIGGIINNFFOO, SSAA__OONNSSTTAACCKK,  SSAA__RREESSTTAARRTT,  SSAA__NNOODDEEFFEERR,  SSAA__RREESSEETT‐‐
       HHAANNDD,  and,  if defined by the architecture, SSAA__RREESSTTOORREERR may not be reliably probed for using this
       mechanism, because they were introduced before Linux 5.11.  However, in general, programs may  as‐
       sume that these flags are supported, since they have all been supported since Linux 2.6, which was
       released in the year 2003.

       See EXAMPLES below for a demonstration of the use of SSAA__UUNNSSUUPPPPOORRTTEEDD.

RREETTUURRNN VVAALLUUEE
       ssiiggaaccttiioonn() returns 0 on success; on error, -1 is returned, and _e_r_r_n_o is set to indicate  the  er‐
       ror.

EERRRROORRSS
       EEFFAAUULLTT _a_c_t or _o_l_d_a_c_t points to memory which is not a valid part of the process address space.

       EEIINNVVAALL An  invalid  signal  was  specified.   This will also be generated if an attempt is made to
              change the action for SSIIGGKKIILLLL or SSIIGGSSTTOOPP, which cannot be caught or ignored.

SSTTAANNDDAARRDDSS
       POSIX.1-2001, POSIX.1-2008, SVr4.

NNOOTTEESS
       A child created via ffoorrkk(2) inherits a copy of its parent's signal dispositions.   During  an  eexx‐‐
       eeccvvee(2), the dispositions of handled signals are reset to the default; the dispositions of ignored
       signals are left unchanged.

       According to POSIX, the behavior of a process is undefined after it ignores a SSIIGGFFPPEE,  SSIIGGIILLLL,  or
       SSIIGGSSEEGGVV  signal that was not generated by kkiillll(2) or rraaiissee(3).  Integer division by zero has unde‐
       fined result.  On some architectures it will generate a SSIIGGFFPPEE signal.  (Also  dividing  the  most
       negative integer by -1 may generate SSIIGGFFPPEE.)  Ignoring this signal might lead to an endless loop.

       POSIX.1-1990  disallowed  setting the action for SSIIGGCCHHLLDD to SSIIGG__IIGGNN.  POSIX.1-2001 and later allow
       this possibility, so that ignoring SSIIGGCCHHLLDD can be used to prevent the  creation  of  zombies  (see
       wwaaiitt(2)).  Nevertheless, the historical BSD and System V behaviors for ignoring SSIIGGCCHHLLDD differ, so
       that the only completely portable method of ensuring that terminated children do not  become  zom‐
       bies is to catch the SSIIGGCCHHLLDD signal and perform a wwaaiitt(2) or similar.

       POSIX.1-1990 specified only SSAA__NNOOCCLLDDSSTTOOPP.  POSIX.1-2001 added SSAA__NNOOCCLLDDSSTTOOPP, SSAA__NNOOCCLLDDWWAAIITT, SSAA__NNOODDEE‐‐
       FFEERR, SSAA__OONNSSTTAACCKK, SSAA__RREESSEETTHHAANNDD, SSAA__RREESSTTAARRTT, and SSAA__SSIIGGIINNFFOO.  Use of these latter values in _s_a___f_l_a_g_s
       may be less portable in applications intended for older UNIX implementations.

       The SSAA__RREESSEETTHHAANNDD flag is compatible with the SVr4 flag of the same name.

       The  SSAA__NNOODDEEFFEERR  flag  is  compatible  with the SVr4 flag of the same name under kernels 1.3.9 and
       later.  On older kernels the Linux implementation allowed the receipt of any signal, not just  the
       one we are installing (effectively overriding any _s_a___m_a_s_k settings).

       ssiiggaaccttiioonn() can be called with a NULL second argument to query the current signal handler.  It can
       also be used to check whether a given signal is valid for the current machine by calling  it  with
       NULL second and third arguments.

       It is not possible to block SSIIGGKKIILLLL or SSIIGGSSTTOOPP (by specifying them in _s_a___m_a_s_k).  Attempts to do so
       are silently ignored.

       See ssiiggsseettooppss(3) for details on manipulating signal sets.

       See ssiiggnnaall--ssaaffeettyy(7) for a list of the async-signal-safe functions that can be safely  called  in‐
       side from inside a signal handler.

   CC lliibbrraarryy//kkeerrnneell ddiiffffeerreenncceess
       The  glibc wrapper function for ssiiggaaccttiioonn() gives an error (EEIINNVVAALL) on attempts to change the dis‐
       position of the two real-time signals used internally by the NPTL threading  implementation.   See
       nnppttll(7) for details.

       On  architectures where the signal trampoline resides in the C library, the glibc wrapper function
       for ssiiggaaccttiioonn() places the address of the trampoline code in the _a_c_t_._s_a___r_e_s_t_o_r_e_r  field  and  sets
       the SSAA__RREESSTTOORREERR flag in the _a_c_t_._s_a___f_l_a_g_s field.  See ssiiggrreettuurrnn(2).

       The  original  Linux  system  call was named ssiiggaaccttiioonn().  However, with the addition of real-time
       signals in Linux 2.2, the fixed-size, 32-bit _s_i_g_s_e_t___t type supported by that system  call  was  no
       longer  fit for purpose.  Consequently, a new system call, rrtt__ssiiggaaccttiioonn(), was added to support an
       enlarged _s_i_g_s_e_t___t type.  The new system call takes a fourth  argument,  _s_i_z_e___t  _s_i_g_s_e_t_s_i_z_e,  which
       specifies  the  size in bytes of the signal sets in _a_c_t_._s_a___m_a_s_k and _o_l_d_a_c_t_._s_a___m_a_s_k.  This argument
       is currently required to have the value _s_i_z_e_o_f_(_s_i_g_s_e_t___t_) (or the error EEIINNVVAALL results).  The glibc
       ssiiggaaccttiioonn()  wrapper  function  hides  these details from us, transparently calling rrtt__ssiiggaaccttiioonn()
       when the kernel provides it.

   UUnnddooccuummeenntteedd
       Before the introduction of SSAA__SSIIGGIINNFFOO, it was also possible to  get  some  additional  information
       about  the signal.  This was done by providing an _s_a___h_a_n_d_l_e_r signal handler with a second argument
       of type _s_t_r_u_c_t _s_i_g_c_o_n_t_e_x_t, which is the same structure as the one that is passed in  the  _u_c___m_c_o_n_‐
       _t_e_x_t  field  of the _u_c_o_n_t_e_x_t structure that is passed (via a pointer) in the third argument of the
       _s_a___s_i_g_a_c_t_i_o_n handler.  See the relevant Linux kernel sources for details.  This  use  is  obsolete
       now.

BBUUGGSS
       When  delivering a signal with a SSAA__SSIIGGIINNFFOO handler, the kernel does not always provide meaningful
       values for all of the fields of the _s_i_g_i_n_f_o___t that are relevant for that signal.

       Up to and including Linux 2.6.13, specifying SSAA__NNOODDEEFFEERR in _s_a___f_l_a_g_s prevents not only  the  deliv‐
       ered  signal  from being masked during execution of the handler, but also the signals specified in
       _s_a___m_a_s_k.  This bug was fixed in Linux 2.6.14.

EEXXAAMMPPLLEESS
       See mmpprrootteecctt(2).

   PPrroobbiinngg ffoorr ffllaagg ssuuppppoorrtt
       The following example program exits with status EEXXIITT__SSUUCCCCEESSSS if SSAA__EEXXPPOOSSEE__TTAAGGBBIITTSS is determined to
       be supported, and EEXXIITT__FFAAIILLUURREE otherwise.

       #include <signal.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>

       void
       handler(int signo, siginfo_t *info, void *context)
       {
           struct sigaction oldact;

           if (sigaction(SIGSEGV, NULL, &oldact) == -1
               || (oldact.sa_flags & SA_UNSUPPORTED)
               || !(oldact.sa_flags & SA_EXPOSE_TAGBITS))
           {
               _exit(EXIT_FAILURE);
           }
           _exit(EXIT_SUCCESS);
       }

       int
       main(void)
       {
           struct sigaction act = { 0 };

           act.sa_flags = SA_SIGINFO | SA_UNSUPPORTED | SA_EXPOSE_TAGBITS;
           act.sa_sigaction = &handler;
           if (sigaction(SIGSEGV, &act, NULL) == -1) {
               perror("sigaction");
               exit(EXIT_FAILURE);
           }

           raise(SIGSEGV);
       }

SSEEEE AALLSSOO
       kkiillll(1),  kkiillll(2), ppaauussee(2), ppiiddffdd__sseenndd__ssiiggnnaall(2), rreessttaarrtt__ssyyssccaallll(2), sseeccccoommpp(2), ssiiggaallttssttaacckk(2),
       ssiiggnnaall(2),  ssiiggnnaallffdd(2),  ssiiggppeennddiinngg(2),  ssiiggpprrooccmmaasskk(2),  ssiiggrreettuurrnn(2),  ssiiggssuussppeenndd(2),  wwaaiitt(2),
       kkiillllppgg(3), rraaiissee(3), ssiiggiinntteerrrruupptt(3), ssiiggqquueeuuee(3), ssiiggsseettooppss(3), ssiiggvveecc(3), ccoorree(5), ssiiggnnaall(7)

Linux man-pages 6.03                            2023-02-10                                   sigaction(2)
